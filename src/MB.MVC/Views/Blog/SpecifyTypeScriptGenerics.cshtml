<blog-post title="Specify TypeScript Generics">
    <article-section section-title="Overview">
        <p>Generics are implemented differently in each programming language. This is just the reality. C++, C#, and Java all have different rules and implementations for generics--TypeScript is no different.</p>
        <p>TypeScript generics do not infer generics consistently like normal normal static languages.</p>
        <p>Take a look at the following Vue computed function:</p>
        <pre>
            <code>
        const result = computed(() => {
          if (hook.valid) {
            return "valid";
          }
          return "";
        });
            </code>
        </pre>
        <p>What do you thing the return type is?</p>
        <p>You may think it is a ComputedRef of type string, but the type is actually:</p>
        <pre>
            <code>
        ComputedRef&lt;"" | "valid"&gt;
            </code>
        </pre>
        <p>The end result is the same, but this is a <a href="https://en.wikipedia.org/wiki/Leaky_abstraction" target="_blank">leaky abstraction</a>. Our function should not leak the details of the <em>exact</em> return type. We want our function to return a string.</p>
        <p>The only thing we need to change is:</p>
        <pre>
            <code>
        const result = computed&lt;string&gt;(() => {
          if (hook.valid) {
            return "valid";
          }
          return "";
        });
            </code>
        </pre>
        <p>And, now, our return type is fixed.</p>
        <p>Specifying every generic in your application is likely excessive. Some functions are able to infer your return types with accuracy--others not so much. Keeping your return types in check will help contribute to a rock solid code base.</p>
    </article-section>
</blog-post>