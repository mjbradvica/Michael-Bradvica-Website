<blog-post title="Always Initialize State">
    <article-section section-title="Introduction">
        <p>When using state objects in React or Vue you may provide a default value for each variable.</p>
        <p>This appears so:</p>
        <pre>
        <code>
    const [state, setState] = useState&lt;number&gt;(10);
        </code>
    </pre>
        <p>or in Vue:</p>
        <pre>
        <code>
    const state = ref&lt;number&gt;(10);
        </code>
    </pre>
        <blockquote>
            Even though it's optional, you should always initialize your state objects.
        </blockquote>
        <p>
            State objects that are not initialized will default to undefined. The type will be the generic you specify, or undefined. If you refrain from giving the generic a type, it will be of type 'any'. None of this is desired in front-end development.
        </p>
        <p>
            We want to avoid undefined as much as possible.
        </p>
        <p>
            Undefined variables leave you open to runtime errors when de-referencing objects. It forces you to insert guards to check for possible undefined variables in code. Leaving the option open for undefined variables is inviting bad things to happen.
        </p>
    </article-section>
    <article-section section-title="Initializing State Variables">
        <p>
            We have two kinds of variables to initialize-primitive and reference types.
        </p>
        <p>
            Primitive types are easy; you can have an object that represents default types:
        </p>
        <pre>
            <code>
    const ValueDefaults = {
        Number: 0,
        Boolean: false,
        String: "",
    };
            </code>
        </pre>
        <p>
            You can use them in your code as follows:
        </p>
        <pre>
            <code>
    const [state, setState] = useState&lt;number&gt;(ValueDefaults.Number);
            </code>
        </pre>
        <p>Declarative variables are ideal for teams. Ultimately, they allow us to be explicit with our intentions. I highly suggest you enable the ESLint <a href="https://typescript-eslint.io/rules/no-magic-numbers/" target="_blank">no magic numbers</a> to help enforce this rule.</p>
        <p>Since arrays are reference types, you need to provide a blank array:</p>
        <pre>
            <code>
    const count = ref&lt;Array&lt;number&gt;&gt;([]);
            </code>
        </pre>
        <p>With objects I recommend a function that returns a blank object as a placeholder...</p>
        <pre>
            <code>
    export interface PersonResponse {
        id: string;
        name: string;
        age: number;
    }

    export function defaultPersonResponse(): PersonResponse {
      return {
        id: ValueDefaults.String,
        name: ValueDefaults.String,
        age: ValueDefaults.Number,
      };
    }
            </code>
        </pre>
        <p>
            which can be used like so:
        </p>
        <pre>
            <code>
    const admin = ref&lt;PersonResponse&gt;(defaultPersonResponse());
            </code>
        </pre>
        <p>
            Initializing state variables is one of the easiest things you can do to reduce the possibility of bugs in code. This concept is the same as the <a href="https://en.wikipedia.org/wiki/Null_object_pattern" target="_blank">Null Object Pattern</a>. Default state variable help to declare the intent of your code base and prevent unnecessary errors. One of the best ways to accomplish this is via a <a asp-action="MimickingUseStateInVue" asp-controller="Blog" target="_blank">custom hook</a>.
        </p>
    </article-section>
</blog-post>